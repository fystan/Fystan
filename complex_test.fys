# Complex Fystan test program using all language features

def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)

def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def is_prime(num):
    if num < 2:
        return False
    i = 2
    while i * i <= num:
        if num % i == 0:
            return False
        i = i + 1
    return True

def print_primes(limit):
    count = 0
    num = 2
    while num < limit:
        if is_prime(num):
            print(num)
            count = count + 1
        num = num + 1
    return count

# Test built-in functions
test_str = "Hello, Fystan!"
print(test_str)
str_len = len(test_str)
print("String length: ")
print(str_len)

# Test range function
print("Numbers from range:")
for i in range(1, 6):
    print(i)

# Test complex arithmetic
a = 10
b = 3
result = (a * b + factorial(4)) / (b + 1)
print("Complex arithmetic result (should be 18):")
print(result)

# Test nested structures
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("Matrix elements:")
for row in matrix:
    for element in row:
        print(element)

# Test fibonacci sequence
print("First 10 Fibonacci numbers:")
i = 0
while i < 10:
    fib_num = fibonacci(i)
    print(fib_num)
    i = i + 1

# Test prime numbers
print("Prime numbers up to 30:")
prime_count = print_primes(30)
print("Total primes found:")
print(prime_count)

# Test conditional structures
x = 15
if x % 2 == 0:
    print("x is even")
elif x % 3 == 0:
    print("x is divisible by 3")
else:
    print("x is neither even nor divisible by 3")

# Test nested loops and conditions
print("Multiplication table (3x3):")
i = 1
while i <= 3:
    j = 1
    while j <= 3:
        product = i * j
        print(product)
        j = j + 1
    i = i + 1

# Test break and continue
print("Numbers from 1 to 10, skipping multiples of 3:")
for num in range(1, 11):
    if num % 3 == 0:
        continue
    print(num)

print("Counting down from 10 to 1, stopping at 5:")
counter = 10
while counter > 0:
    print(counter)
    if counter == 5:
        break
    counter = counter - 1

# Test function composition
result1 = factorial(5)
result2 = fibonacci(8)
final_result = result1 + result2
print("Factorial(5) + Fibonacci(8) = ")
print(final_result)

print("Complex test completed successfully!")